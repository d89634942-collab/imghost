package com.rwtool.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/reports")
@CrossOrigin(origins = "http://localhost:3000")
public class ReportController {

    @Value("${app.storage.local.baseDir:}")
    private String localBaseDir;

    /**
     * Get report metadata by ID
     * @param id - report ID
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getReport(@PathVariable String id) {
        Map<String, Object> meta = new HashMap<>();
        meta.put("id", id);
        meta.put("message", "Report metadata endpoint");
        return ResponseEntity.ok(meta);
    }

    /**
     * Presign endpoint for viewing PDF files
     * This returns a URL that can be used to stream/view the PDF
     * @param id - report ID (not used in current implementation, but kept for future use)
     * @param body - request body containing folder and fileName
     */
    @PostMapping("/{id}/presign")
    public ResponseEntity<Map<String, Object>> presignView(
            @PathVariable String id,
            @RequestBody Map<String, Object> body) {

        Map<String, Object> res = new HashMap<>();
        
        try {
            // Extract folder and fileName from request body
            String folder = (String) body.get("folder");
            String fileName = (String) body.get("fileName");
            
            if (folder == null || fileName == null) {
                res.put("message", "Missing folder or fileName in request");
                return ResponseEntity.badRequest().body(res);
            }

            // Construct the preview URL that points to our streaming endpoint
            String previewUrl = String.format(
                "http://localhost:8080/reports/stream?folder=%s&fileName=%s",
                folder, fileName
            );
            
            res.put("url", previewUrl);
            return ResponseEntity.ok(res);
            
        } catch (Exception e) {
            res.put("message", "Error generating preview URL: " + e.getMessage());
            return ResponseEntity.internalServerError().body(res);
        }
    }

    /**
     * Stream PDF file for inline viewing
     * This endpoint serves the actual PDF file with inline disposition
     * @param folder - folder name
     * @param fileName - file name
     */
    @GetMapping("/stream")
    public ResponseEntity<Resource> streamFile(
            @RequestParam String folder,
            @RequestParam String fileName) {
        
        try {
            // Construct file path: baseDir/reports/folder/fileName
            Path filePath = Paths.get(localBaseDir)
                    .resolve("reports")
                    .resolve(folder)
                    .resolve(fileName)
                    .normalize();
            
            Resource resource = new UrlResource(filePath.toUri());
            
            if (!resource.exists() || !resource.isReadable()) {
                return ResponseEntity.notFound().build();
            }
            
            // Determine content type
            String contentType = "application/pdf";
            if (!fileName.toLowerCase().endsWith(".pdf")) {
                contentType = "application/octet-stream";
            }
            
            // Use inline disposition for preview (not attachment)
            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(contentType))
                    .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + fileName + "\"")
                    .header(HttpHeaders.CACHE_CONTROL, "no-cache, no-store, must-revalidate")
                    .header(HttpHeaders.PRAGMA, "no-cache")
                    .header(HttpHeaders.EXPIRES, "0")
                    .body(resource);
                    
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
}
reportcontroller..js


reportservice.js

const API_BASE_URL = "http://localhost:8080";

const reportService = {
  /**
   * Get presigned URL for viewing a report
   * @param {string} reportId - The report ID
   * @param {string} userId - The user ID
   * @param {string} folder - The folder path
   * @param {string} fileName - The file name
   */
  presignView: async (reportId, userId, folder, fileName) => {
    try {
      const res = await fetch(`${API_BASE_URL}/reports/${reportId}/presign`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          userId,
          folder,
          fileName
        })
      });
      
      if (!res.ok) {
        throw new Error("Failed to get preview URL");
      }
      
      return res.json();
    } catch (error) {
      console.error("Error in presignView:", error);
      throw error;
    }
  }
};

export default reportService;


downloadreport.js

import React, { useState, useEffect } from 'react';
import './DownloadReport.css';
import { useNavigate, Routes, Route } from 'react-router-dom';
import folderService from '../../../services/folderService';
import reportService from '../../../services/reportService';

import PDFViewer from '../PDFViewer/PDFViewer';

const DownloadReportComponent = () => {
    const navigate = useNavigate();
    const [searchQuery, setSearchQuery] = useState('');
    const [filterCategory, setFilterCategory] = useState('all');
    const [selectedReport, setSelectedReport] = useState(null);
    const [selectedFile, setSelectedFile] = useState(null);
    const [showFavorites, setShowFavorites] = useState(false);
    const [selectedReports, setSelectedReports] = useState([]);
    const [reports, setReports] = useState([]);
    const [loading, setLoading] = useState(true);
    const [domains, setDomains] = useState([]);
    const [statusMsg, setStatusMsg] = useState('');

    // TODO: Replace with actual user from auth context
    const currentUser = {
        name: 'Tony Stark',
        email: 'tony3000@stark.com',
        role: 'Subscriber'
    };

    // Fetch user's accessible files on component mount
    useEffect(() => {
        fetchUserFiles();
    }, []);

    const fetchUserFiles = async () => {
        try {
            setLoading(true);
            const files = await folderService.getUserAccessibleFiles(currentUser.email);
            
            // Transform files to reports format
            const transformedReports = files.map((file, index) => ({
                id: index + 1,
                title: file.name,
                description: `File from ${file.folder} folder`,
                domain: file.folder,
                publishedDate: file.modified ? new Date(file.modified).toLocaleDateString() : 'N/A',
                version: 'v1.0',
                favorite: false,
                size: file.size,
                fileName: file.name,
                folderPath: file.folder
            }));
            
            setReports(transformedReports);
            
            // Extract unique domains (folders)
            const uniqueDomains = [...new Set(files.map(f => f.folder))].sort();
            setDomains(uniqueDomains);
        } catch (error) {
            console.error('Error fetching user files:', error);
            setReports([]);
            setDomains([]);
        } finally {
            setLoading(false);
        }
    };

    const filteredReports = reports.filter(r => {
        const search = r.title.toLowerCase().includes(searchQuery.toLowerCase()) || r.domain.toLowerCase().includes(searchQuery.toLowerCase());
        const dom = filterCategory === 'all' || r.domain === filterCategory;
        const fav = !showFavorites || r.favorite;
        return search && dom && fav;
    });

    const toggleFavorite = (id) => {
        setReports(reports.map(r => r.id === id ? { ...r, favorite: !r.favorite } : r));
    };

    const getFavoritesCount = () => reports.filter(r => r.favorite).length;

    const handleDownload = (report) => {
        // Download file from backend
        const downloadUrl = `http://localhost:8080/api/files/download?folder=${encodeURIComponent(report.folderPath)}&fileName=${encodeURIComponent(report.fileName)}`;
        const link = document.createElement("a");
        link.href = downloadUrl;
        link.download = report.fileName;
        link.click();
    };

    const handleSelectReport = (id) => {
        setSelectedReports(prev => 
            prev.includes(id) ? prev.filter(reportId => reportId !== id) : [...prev, id]
        );
    };

    const handleSelectAll = () => {
        if (selectedReports.length === filteredReports.length) {
            setSelectedReports([]);
        } else {
            setSelectedReports(filteredReports.map(r => r.id));
        }
    };

    const handleDownloadSelected = () => {
        // Download each selected report
        selectedReports.forEach(id => {
            const report = reports.find(r => r.id === id);
            if (report) {
                handleDownload(report);
            }
        });
        // Clear selections after download
        setSelectedReports([]);
    };

    const handlePreviewReport = async (report) => {
        setStatusMsg("");
        try {
            const userId = currentUser?.email || "subscriber-demo";
            const data = await reportService.presignView(
                report.id.toString(),
                userId,
                report.folderPath,
                report.fileName
            );

            if (!data) {
                setStatusMsg("Preview not available.");
                return;
            }
            if (data.message && !data.url) {
                setStatusMsg(data.message);
                return;
            }
            if (!data.url) {
                setStatusMsg("No URL received for preview.");
                return;
            }

            setSelectedFile({
                fileName: report.fileName,
                displayName: report.title,
                presignedUrl: data.url,
                reportId: report.id
            });
        } catch (error) {
            console.error("Preview error:", error);
            setStatusMsg("Failed to preview report. Please try again.");
        }
    };

    if(selectedFile) {
        return (
            <PDFViewer 
                displayName={selectedFile.displayName}
                presignedUrl={selectedFile.presignedUrl}
                onBack={() => setSelectedFile(null)} 
            />
        );
    }

    return (
        <div className="download-report-container">
            {/* Header Section */}
            <div className="hero-section mb-5">
                <div className="d-flex align-items-center mb-3">
                    <div className="hero-icon me-3">
                        <i className="bi bi-file-earmark-arrow-down"></i>
                    </div>
                    <div>
                        <h1 className="hero-title mb-2">Download Reports</h1>
                        <p className="hero-subtitle mb-0">
                            Access and download your reports of the respective approved domain
                        </p>
                    </div>
                </div>
            </div>
            
            {/* Search and Filter */}
            <div className="search-filter-section card shadow-sm mb-4">
                <div className="card-body">
                    <div className="row g-3 align-items-center">
                        <div className="col-md-5">
                            <div className="search-wrapper">
                                <i className="bi bi-search search-icon"></i>
                                <input type="text" className="form-control search-input" placeholder="Search reports..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} />
                            </div>
                        </div>
                        <div className="col-md-5">
                            <select className="form-select filter-select" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)}>
                                <option value="all">All Domains</option>
                                {domains.map(dom => <option key={dom} value={dom}>{dom}</option>)}
                            </select>
                        </div>
                        <div className="col-md-2">
                            <button
                                className={`btn w-100 ${showFavorites ? 'btn-warning' : 'btn-outline-warning'}`}
                                onClick={() => setShowFavorites(!showFavorites)}
                            >
                                <i className="bi bi-star-fill me-2"></i>
                                Favorites
                                <span className="badge bg-light text-dark ms-2">{getFavoritesCount()}</span>
                            </button>
                        </div>
                    </div>
                    {selectedReports.length > 0 && (
                        <div className="row mt-3">
                            <div className="col-12">
                                <div className="d-flex justify-content-between align-items-center">
                                    <span className="text-muted">
                                        <i className="bi bi-check-square me-2"></i>
                                        {selectedReports.length} report(s) selected
                                    </span>
                                    <div className="d-flex gap-2">
                                        <button className="btn btn-sm btn-outline-secondary" onClick={handleSelectAll}>
                                            {selectedReports.length === filteredReports.length ? 'Deselect All' : 'Select All'}
                                        </button>
                                        <button className="btn btn-download" onClick={handleDownloadSelected}>
                                            <i className="bi bi-download me-2"></i>
                                            Download Selected

            {/* Reports */}
            {loading ? (
                <div className="text-center py-5">
                    <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                    </div>
                    <p className="mt-3 text-muted">Loading your accessible files...</p>
                </div>
            ) : filteredReports.length > 0 ? (
                <div className="row g-4">
                    {filteredReports.map(r => (
                        <div key={r.id} className="col-12">
                            <div className="card report-card shadow-sm">
                                <div className="card-body">
                                    <div className="d-flex align-items-start">
                                        <div className="form-check me-3">
                                            <input
                                                className="form-check-input"
                                                type="checkbox"
                                                checked={selectedReports.includes(r.id)}
                                                onChange={() => handleSelectReport(r.id)}
                                                style={{ width: '20px', height: '20px', marginTop: '5px', cursor: 'pointer' }}
                                            />
                                        </div>
                                        <div className="report-icon me-3">
                                            <i className="bi bi-file-earmark-text"></i>
                                        </div>
                                        <div className="flex-grow-1">
                                            <div className="d-flex justify-content-between align-items-start mb-2">
                                                <h4 className="report-card-title mb-0">{r.title}</h4>
                                                <button
                                                    className="btn btn-sm btn-link p-0"
                                                    onClick={() => toggleFavorite(r.id)}
                                                    style={{ fontSize: '1.5rem', color: r.favorite ? '#ffc107' : '#ccc' }}
                                                >
                                                    <i className={`bi bi-star${r.favorite ? '-fill' : ''}`}></i>
                                                </button>
                                            </div>
                                            <p className="report-description text-muted mb-3">{r.description}</p>
                                            <div className="report-meta d-flex flex-wrap gap-3 mb-4">
                                                {[
                                                    { icon: 'folder', label: 'Domain', value: r.domain },
                                                    { icon: 'calendar-event', label: 'Published', value: r.publishedDate },
                                                    { icon: 'tag', label: 'Version', value: r.version },
                                                    { icon: 'file-pdf', label: 'Format', value: 'PDF' }
                                                ].map((meta, i) => (
                                                    <span key={i} className="meta-item">
                                                        <i className={`bi bi-${meta.icon} me-1`}></i>
                                                        <strong>{meta.label}:</strong> {meta.value}
                                                    </span>
                                                ))}
                                            </div>
                                            <div className="d-flex gap-3 flex-wrap">
                                                <button className="btn btn-download" onClick={() => handleDownload(r)}>
                                                    <i className="bi bi-download me-2"></i>Download Report
                                                </button>
                                                <button className="btn btn-preview-new" onClick={() => handlePreviewReport(r)}>
                                                    <i className="bi bi-eye me-2"></i>Preview Report
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            ) : (
                <div className="no-results card shadow-sm">
                    <div className="card-body text-center py-5">
                        <i className="bi bi-inbox no-results-icon"></i>
                        <h5 className="mt-3 mb-2">No Reports Found</h5>
                        <p className="text-muted mb-0">Try adjusting your search or filter criteria</p>
                    </div>
                </div>
            )}
        </div>
    );
};
export default DownloadReportComponent;


pdfviewer.css

:root {
    --scb-blue: #0F265C;
    --scb-green: #00B140;
    --scb-dark-blue: #0A1A3C;
    --scb-light: #F5F7FA;
    --scb-white: #FFFFFF;
    --scb-gray: #666666;
}

.pdf-viewer-container {
    background: var(--scb-light);
    min-height: 100vh;
    font-family: Arial, sans-serif;
    transition: all 0.3s ease;
}

.pdf-viewer-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
    background: white;
}

/* Header */
.viewer-header {
    background: var(--scb-blue);
    color: white;
    padding: 20px 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 3px solid var(--scb-green);
}

.header-title h2 {
    font-size: 24px;
    margin-bottom: 5px;
}

.report-title {
    font-size: 14px;
    color: #cce0ff;
}

.header-actions {
    display: flex;
    gap: 15px;
}

/* Buttons */
.btn {
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    font-size: 14px;
    transition: all 0.3s ease;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.btn-primary {
    background: var(--scb-green);
    color: white;
}

.btn-primary:hover {
    background: #009933;
}

.btn-secondary {
    background: var(--scb-white);
    color: var(--scb-blue);
    border: 2px solid var(--scb-blue);
}

.btn-secondary:hover {
    background: var(--scb-blue);
    color: white;
}

/* Navigation */
.navigation-controls {
    background: var(--scb-white);
    padding: 15px 30px;
    display: flex;
    align-items: center;
    gap: 20px;
    border-bottom: 2px solid #e0e0e0;
}

.page-controls {
    display: flex;
    align-items: center;
    gap: 15px;
}

.page-info {
    font-weight: bold;
    color: var(--scb-blue);
    font-size: 16px;
    min-width: 120px;
    text-align: center;
}

.zoom-controls {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-left: auto;
}

.zoom-select {
    padding: 8px 15px;
    border: 2px solid var(--scb-blue);
    border-radius: 6px;
    background: white;
    color: var(--scb-blue);
    font-weight: 500;
}

.zoom-select:focus {
    outline: none;
    border-color: var(--scb-green);
}

/* PDF Content */
.pdf-content-area {
    padding: 30px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    background: #e8f0f8;
    min-height: calc(100vh - 160px);
    overflow: auto;
}

.pdf-document {
    width: 800px;
    min-height: 1000px;
    background: white;
    box-shadow: 0 8px 30px rgba(15, 38, 92, 0.2);
    border: 2px solid var(--scb-blue);
    border-radius: 8px;
    position: relative;
    transition: transform 0.3s ease;
}

/* Fix for transform positioning */
.pdf-document {
    transform-origin: top center !important;
}

/* Watermark */
.watermark-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 48px;
    color: rgba(15, 38, 92, 0.08);
    transform: rotate(-45deg);
    font-weight: bold;
    z-index: 1;
}

/* PDF Content */
.pdf-content {
    padding: 50px;
    position: relative;
    z-index: 2;
}

.document-header {
    text-align: center;
    margin-bottom: 40px;
    padding-bottom: 20px;
    border-bottom: 2px solid var(--scb-green);
}

.document-header h1 {
    color: var(--scb-blue);
    font-size: 32px;
    margin-bottom: 10px;
}

.document-header p {
    color: var(--scb-gray);
    font-size: 16px;
}

.section {
    margin-bottom: 30px;
}

.section h2 {
    color: var(--scb-blue);
    font-size: 22px;
    margin-bottom: 15px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e0e0e0;
}

.section p {
    line-height: 1.6;
    color: #444;
    margin-bottom: 15px;
}

.metrics-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin: 25px 0;
}

.metric-card {
    background: var(--scb-light);
    padding: 20px;
    border-radius: 8px;
    border-left: 4px solid var(--scb-green);
    text-align: center;
}

.metric-value {
    font-size: 24px;
    font-weight: bold;
    color: var(--scb-blue);
    margin-bottom: 5px;
}

.metric-label {
    color: var(--scb-gray);
    font-size: 14px;
}

.document-footer {
    text-align: center;
    margin-top: 50px;
    padding-top: 20px;
    border-top: 1px solid #e0e0e0;
    color: var(--scb-gray);
    font-size: 14px;
}

/* Fullscreen specific styles */
.fullscreen .pdf-content-area {
    padding: 20px;
    background: white;
}

.fullscreen .pdf-document {
    box-shadow: none;
    border: 1px solid #ddd;
}

/* New iframe-based viewer styles */
.pdf-viewer-header {
    background: var(--scb-blue);
    color: white;
    padding: 20px 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 3px solid var(--scb-green);
    gap: 20px;
}

.pdf-viewer-title {
    font-size: 24px;
    margin: 0;
    flex: 1;
    text-align: center;
}

.pdf-viewer-empty,
.pdf-viewer-error {
    padding: 60px 20px;
    text-align: center;
    font-size: 18px;
    color: var(--scb-gray);
    background: var(--scb-light);
}

.pdf-viewer-frame-wrap {
    position: relative;
    width: 100%;
    height: calc(100vh - 100px);
    background: var(--scb-light);
}

.pdf-viewer-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 18px;
    color: var(--scb-blue);
    font-weight: 600;
}

.pdf-viewer-iframe {
    width: 100%;
    height: 100%;
    border: none;
    background: white;
}

.btn-outline-primary {
    background: transparent;
    color: white;
    border: 2px solid white;
    padding: 10px 20px;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn-outline-primary:hover {
    background: white;
    color: var(--scb-blue);
}

/* Responsive */
@media (max-width: 768px) {
    .pdf-document {
        width: 95%;
        min-height: auto;
    }

    .pdf-content {
        padding: 30px;
    }

    .metrics-grid {
        grid-template-columns: 1fr;
    }

    .header-actions {
        flex-direction: column;
        gap: 10px;
    }

    .pdf-viewer-header {
        flex-direction: column;
        gap: 10px;
    }

    .pdf-viewer-title {
        font-size: 18px;
    }
}
package com.rwtool.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;

@Configuration
public class CorsConfig {

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        
        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        
        source.registerCorsConfiguration("/api/**", config);
        source.registerCorsConfiguration("/reports/**", config);
        return new CorsFilter(source);
    }
}

corsconfig.


securityconfig

package com.rwtool.config;

import com.rwtool.service.CustomUserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Autowired
    private CustomUserDetailsService userDetailsService;
    
    @Autowired
    private JwtAuthenticationFilter jwtAuthenticationFilter;
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }
    
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for development
            .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Enable CORS
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll() // Allow authentication endpoints
                .requestMatchers("/api/**").permitAll() // Allow all API endpoints for now (domains, subscriptions)
                .requestMatchers("/reports/**").permitAll() // Allow report preview endpoints
                .requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html").permitAll() // Allow Swagger
                .anyRequest().permitAll() // Allow everything else for development
            )
            .authenticationProvider(authenticationProvider())
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
    
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOriginPatterns(Arrays.asList("*")); // Allow all origins for development
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}




re
