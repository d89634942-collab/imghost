package com.rwtool.controller;

import com.rwtool.model.Notification;
import com.rwtool.model.User;
import com.rwtool.service.NotificationService;
import com.rwtool.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/notifications")
public class NotificationController {

    private final NotificationService notificationService;
    private final UserService userService;

    public NotificationController(NotificationService notificationService, UserService userService) {
        this.notificationService = notificationService;
        this.userService = userService;
    }

    @GetMapping
    public ResponseEntity<List<Notification>> getUserNotifications(Authentication authentication) {
        String username = authentication.getName();
        User user = userService.getUserByUsername(username);
        List<Notification> notifications = notificationService.getNotificationsForUser(user);
        return ResponseEntity.ok(notifications);
    }

    @PostMapping("/{id}/read")
    public ResponseEntity<Void> markAsRead(@PathVariable Long id) {
        notificationService.markAsRead(id);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/read-all")
    public ResponseEntity<Void> markAllAsRead(Authentication authentication) {
        String username = authentication.getName();
        User user = userService.getUserByUsername(username);
        notificationService.markAllAsRead(user);
        return ResponseEntity.ok().build();
    }
}


NotificationController

inside model 
Notification 

package com.rwtool.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "notifications")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Notification {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String message;

    @Column(name = "is_read", nullable = false)
    private boolean isRead = false;

    @Column(nullable = false)
    private LocalDateTime timestamp;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnore
    private User user;

    @Enumerated(EnumType.STRING)
    @Column(name = "notification_type")
    private NotificationType notificationType;

    public enum NotificationType {
        SUBSCRIPTION_REQUEST,
        FILE_PATH_UPDATE
    }

    @PrePersist
    protected void onCreate() {
        timestamp = LocalDateTime.now();
    }
}


notificationrepository

package com.rwtool.repository;

import com.rwtool.model.Notification;
import com.rwtool.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface NotificationRepository extends JpaRepository<Notification, Long> {
    List<Notification> findByUserOrderByTimestampDesc(User user);
}


notification service

package com.rwtool.service;

import com.rwtool.model.Notification;
import com.rwtool.model.User;
import com.rwtool.repository.NotificationRepository;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;

@Service
public class NotificationService {

    @Autowired
    private NotificationRepository notificationRepository;

    public List<Notification> getNotificationsForUser(User user) {
        return notificationRepository.findByUserOrderByTimestampDesc(user);
    }

    public Notification createNotification(User user, String message, Notification.NotificationType type) {
        Notification notification = new Notification();
        notification.setUser(user);
        notification.setMessage(message);
        notification.setNotificationType(type);
        notification.setRead(false);
        return notificationRepository.save(notification);
    }

    public void markAsRead(Long notificationId) {
        notificationRepository.findById(notificationId).ifPresent(notification -> {
            notification.setRead(true);
            notificationRepository.save(notification);
        });
    }

    public void markAllAsRead(User user) {
        List<Notification> notifications = notificationRepository.findByUserOrderByTimestampDesc(user);
        notifications.forEach(notification -> notification.setRead(true));
        notificationRepository.saveAll(notifications);
    }
}

import React, { useState, useEffect } from 'react';
import { Bell, X, UserPlus, FileText } from 'lucide-react';
import './AdminNotification.css';
import { getNotifications, markNotificationAsRead, markAllNotificationsAsRead } from '../../../services/notificationService';

const AdminNotification = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [notifications, setNotifications] = useState([]);

    useEffect(() => {
        if (isOpen) {
            fetchNotifications();
        }
    }, [isOpen]);

    const fetchNotifications = async () => {
        try {
            const data = await getNotifications();
            setNotifications(data);
        } catch (error) {
            console.error("Failed to fetch notifications", error);
        }
    };

    const unreadCount = notifications.filter(n => !n.read).length;

    const handleMarkAsRead = async (id) => {
        try {
            await markNotificationAsRead(id);
            setNotifications(notifications.map(n =>
                n.id === id ? { ...n, read: true } : n
            ));
        } catch (error) {
            console.error("Failed to mark notification as read", error);
        }
    };

    const handleMarkAllAsRead = async () => {
        try {
            await markAllNotificationsAsRead();
            setNotifications(notifications.map(n => ({ ...n, read: true })));
        } catch (error) {
            console.error("Failed to mark all notifications as read", error);
        }
    };

    const removeNotification = (id) => {
        setNotifications(notifications.filter(n => n.id !== id));
    };

    const getNotificationIcon = (type) => {
        switch (type) {
            case 'SUBSCRIPTION_REQUEST':
                return UserPlus;
            case 'FILE_PATH_UPDATE':
                return FileText;
            default:
                return Bell;
        }
    };
    
    const timeAgo = (timestamp) => {
        const now = new Date();
        const notificationTime = new Date(timestamp);
        const differenceInSeconds = Math.floor((now - notificationTime) / 1000);

        const intervals = {
            year: 31536000,
            month: 2592000,
            day: 86400,
            hour: 3600,
            minute: 60
        };

        if (differenceInSeconds < 60) return `${differenceInSeconds} seconds ago`;
        if (differenceInSeconds < intervals.hour) return `${Math.floor(differenceInSeconds / intervals.minute)} minutes ago`;
        if (differenceInSeconds < intervals.day) return `${Math.floor(differenceInSeconds / intervals.hour)} hours ago`;
        if (differenceInSeconds < intervals.month) return `${Math.floor(differenceInSeconds / intervals.day)} days ago`;
        if (differenceInSeconds < intervals.year) return `${Math.floor(differenceInSeconds / intervals.month)} months ago`;
        return `${Math.floor(differenceInSeconds / intervals.year)} years ago`;
    };

    return (
        <div className="admin-notif-container">
            <div className="admin-notif-trigger" onClick={() => setIsOpen(!isOpen)}>
                <Bell size={20} />
                {unreadCount > 0 && (
                    <span className="admin-notif-badge">{unreadCount}</span>
                )}
            </div>

            {isOpen && (
                <div className="admin-notif-dropdown">
                    <div className="admin-notif-header">
                        <h5 className="admin-notif-title">Notifications</h5>
                        {unreadCount > 0 && (
                            <button className="admin-mark-all" onClick={handleMarkAllAsRead}>
                                Mark all read
                            </button>
                        )}
                    </div>

                    <div className="admin-notif-list">
                        {notifications.length === 0 ? (
                            <div className="admin-no-notif">
                                <Bell size={40} />
                                <p>No notifications</p>
                            </div>
                        ) : (
                            notifications.map(notification => {
                                const Icon = getNotificationIcon(notification.notificationType);
                                return (
                                    <div
                                        key={notification.id}
                                        className={`admin-notif-item ${!notification.read ? 'unread' : ''}`}
                                        onClick={() => handleMarkAsRead(notification.id)}
                                    >
                                        <div className={`admin-notif-icon ${notification.notificationType}`}>
                                            <Icon size={18} />
                                        </div>
                                        <div className="admin-notif-content">
                                            <h6>{notification.notificationType.replace(/_/g, ' ')}</h6>
                                            <p>{notification.message}</p>
                                            <span className="admin-notif-time">{timeAgo(notification.timestamp)}</span>
                                        </div>
                                        <button
                                            className="admin-notif-close"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                removeNotification(notification.id);
                                            }}
                                        >
                                            <X size={16} />
                                        </button>
                                    </div>
                                );
                            })
                        )}
                    </div>

                    {notifications.length > 0 && (
                        <div className="admin-notif-footer">
                            <a href="#" className="admin-view-all">View All Activity</a>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default AdminNotification;

